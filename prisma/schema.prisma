// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int       @id @default(autoincrement())
  username String    @unique @db.VarChar(30)
  password String    @db.VarChar(72)
  name     String    @db.VarChar(20)
  lastname String    @db.VarChar(30)
  phone    String    @db.VarChar(10)
  email    String?
  todos    Todo[]
  role     Role
  Payment  Payment[]
  cart     Cart[]
  address  Address[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model Todo {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(150)
  status    Status   @default(PENDING)
  dueDate   DateTime @map("due_date") @db.Date
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("todos")
}

enum Status {
  PENDING
  DOING
  DONE
}

// model User {
//   UserID       Int            @id @default(autoincrement())
//   Username     String         @unique @db.VarChar(30)
//   Password     String         @db.VarChar(72)
//   Email        String?
//   Order        Order[]
//   ShoppingCart ShoppingCart[]

//   @@map("users")
// }

// model Product {
//   ProductID     Int            @id @default(autoincrement())
//   ProductName   String
//   Type          String
//   Price         Float
//   StockQuantity Int
//   ShoppingCarts ShoppingCart[]
//   OrderDetail   OrderDetail[]

//   @@map("Product")
// }

// model Order {
//   OrderID      Int           @id @default(autoincrement())
//   OrderDate    DateTime
//   CustomerID   Int
//   Customer     User          @relation(fields: [CustomerID], references: [UserID])
//   OrderDetails OrderDetail[]
//   Payment      Payment?

//   @@map("Order")
// }

// model OrderDetail {
//   OrderDetailID Int     @id @default(autoincrement())
//   OrderID       Int
//   ProductID     Int
//   Quantity      Int
//   Order         Order   @relation(fields: [OrderID], references: [OrderID])
//   Product       Product @relation(fields: [ProductID], references: [ProductID])

//   @@map("OrderDetail")
// }

// model Payment {
//   PaymentID     Int      @id @default(autoincrement())
//   OrderID       Int      @unique
//   PaymentDate   DateTime
//   Amount        Float
//   PaymentMethod String
//   Order         Order    @relation(fields: [OrderID], references: [OrderID])

//   @@map("Payment")
// }

// model ShoppingCart {
//   CartID   Int       @id @default(autoincrement())
//   UserID   Int
//   User     User      @relation(fields: [UserID], references: [UserID])
//   Products Product[]

//   @@map("ShoppingCart")
// }

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// enum Role {
//   USER
//   ADMIN
// }

// model Search {
//   id    Int    @id @default(autoincrement())
//   name  String
//   count Int
//   // User User[]
// }

// model User {
//   id       Int     @id @default(autoincrement())
//   username String  @unique @db.VarChar(30)
//   password String  @db.VarChar(72)
//   email    String?
//   // phon     String?
//   // role     Role    @default(USER)
//   // Address  String    @db.VarChar(255)
//   // search   Search  @relation(fields: [searchId], references: [id],onDelete: Cascade, onUpdate: Cascade)

//   todos Todo[]
//   // searchId Int

//   @@map("users")
// }

// model Todo {
//   id        Int      @id @default(autoincrement())
//   title     String   @db.VarChar(150)
//   status    Status   @default(PENDING)
//   dueDate   DateTime @map("due_date") @db.Date
//   userId    Int      @map("user_id")
//   user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
//   createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
//   updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

//   @@map("todos")
// }

// enum Status {
//   PENDING
//   DOING
//   DONE
// }

// model Orders {
//   id            Int         @id @default(autoincrement())
//   orderDate     DateTime
//   TotalAmount   Float
//   // user          User       @relation(fields: [UserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   UserId        Int
//   restaurants   Restaurants @relation(fields: [restaurantsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   restaurantsId Int
//   OrderDate     OrderDate[]
// }

// model product {
//   id            Int         @id @default(autoincrement())
//   ItemName      String
//   price         Int
//   description   String
//   restaurants   Restaurants @relation(fields: [restaurantsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   restaurantsId Int
//   file          String
//   OrderDate     OrderDate[]
// }

// model Reviews {
//   id            Int         @id @default(autoincrement())
//   rating        Int
//   comment       String
//   // user          User       @relation(fields: [UserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   UserId        Int
//   restaurants   Restaurants @relation(fields: [restaurantsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
//   restaurantsId Int
// }

// model Restaurants {
//   id       Int        @id @default(autoincrement())
//   password String?
//   location String     @db.VarChar(100)
//   Orders   Orders[]
//   Menutems Menutems[]
//   Reviews  Reviews[]
// }

// model OrderDate {
//   id         Int      @id @default(autoincrement())
//   quantity   Int
//   order      Orders   @relation(fields: [ordersId], references: [id])
//   ordersId   Int
//   menutem    Menutems @relation(fields: [menutemsId], references: [id])
//   menutemsId Int
// }

model Orders {
  id            Int         @id @default(autoincrement())
  orderDate     DateTime
  TotalAmount   Float
  // user          User       @relation(fields: [UserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UserId        Int
  restaurants   Restaurants @relation(fields: [restaurantsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantsId Int
  OrderDate     OrderDate[]
}

model Product {
  id          Int         @id @default(autoincrement())
  ItemName    String
  price       Int
  description String
  file        String      @db.LongText
  OrderDate   OrderDate[]
  Payment     Payment[]
  cart        Cart[]
}

model Reviews {
  id            Int         @id @default(autoincrement())
  rating        Int
  comment       String
  // user          User       @relation(fields: [UserId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  UserId        Int
  restaurants   Restaurants @relation(fields: [restaurantsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  restaurantsId Int
}

model Restaurants {
  id       Int      @id @default(autoincrement())
  password String?
  location String   @db.VarChar(100)
  Orders   Orders[]

  Reviews Reviews[]
}

model OrderDate {
  id        Int     @id @default(autoincrement())
  quantity  Int
  order     Orders  @relation(fields: [ordersId], references: [id])
  ordersId  Int
  Product   Product @relation(fields: [productId], references: [id])
  productId Int
}

model Payment {
  id          Int    @id @default(autoincrement())
  username    String
  productname String
  price       Int
  userId      Int
  amount      Float
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  status    String // เพิ่มฟิลด์สถานะ
  createdAt DateTime @default(now())

  addressId Int
  address   Address @relation(fields: [addressId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Address {
  id          Int       @id @default(autoincrement())
  name        String
  lastname    String
  phone       String
  province    String
  district    String
  tambon      String
  housenumber String
  village     String
  zipcode     String
  other       String
  user        User?     @relation(fields: [userId], references: [id])
  userId      Int?
  Payment     Payment[]
}

model Cart {
  id        Int     @id @default(autoincrement())
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  product   Product @relation(fields: [productId], references: [id])
  productId Int
  status    String
  amount    Int
  priceall  Int
}
